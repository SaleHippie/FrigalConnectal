import java.awt.Desktop;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

import javax.imageio.ImageIO;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.BoxLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;



@SuppressWarnings("serial")
public class parameter extends JPanel {
	private static final String URL = "jdbc:mysql://192.168.188.101:3306/frigalconnectal";
	private static final String USER = "java";
	private static final String PASS = ".etml-";
	
	/**
	 * Creates new form Porpeties
	 * @throws IOException 
	 * @throws SQLException 
	 * @throws ClassNotFoundException 
	 */
	public parameter() throws IOException, SQLException, ClassNotFoundException {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 * @throws IOException 
	 * @throws SQLException 
	 * @throws ClassNotFoundException 
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	private void initComponents() throws IOException, SQLException, ClassNotFoundException {
		java.awt.GridBagConstraints gridBagConstraints;

		Header = new JPanel();
		btnHome = new JButton();
		title = new JLabel();
		panelCentre = new JPanel();
		panelTemp = new JPanel();
		tempTitle = new JLabel();
		minTemp = new JLabel();
		spinMinTemp = new JSpinner();
		maxTemp = new JLabel();
		spinMaxTemp = new JSpinner();
		panelHum = new JPanel();
		humTitle = new JLabel();
		minHum = new JLabel();
		spinMinHum = new JSpinner();
		maxHum = new JLabel();
		spinMaxHum = new JSpinner();
		panelContent = new JPanel();
		panelAlert = new JPanel();
		modeTitle = new JLabel();
		modeList = new JComboBox();
		mailTitle = new JLabel();
		mailField = new JTextField();
		localisationTitle = new JLabel();
		localisationField = new JTextField();
		tempUnitTitle = new JLabel();
		tempUnitList = new JComboBox();
		thermostatTitle = new JLabel();
		thermostatSlider = new JSlider();

		//setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		setPreferredSize(new java.awt.Dimension(512, 400));

		Header.setPreferredSize(new java.awt.Dimension(400, 40));
		Header.setLayout(null);

		ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
		InputStream input = classLoader.getResourceAsStream("home.png");
		Image iconeHome = ImageIO.read(input);

		btnHome.setIcon(new ImageIcon(iconeHome));
		btnHome.setPreferredSize(new java.awt.Dimension(40, 40));
		btnHome.setBounds(0, 0, 40, 40);
		Header.add(btnHome);

		title.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
		title.setHorizontalAlignment(SwingConstants.CENTER);
		title.setText("Paramètre");
		title.setBounds(180, 10, 120, 20);
		Header.add(title);

		add(Header, java.awt.BorderLayout.PAGE_START);

		panelCentre.setLayout(new BoxLayout(panelCentre, BoxLayout.Y_AXIS));

		panelTemp.setPreferredSize(new java.awt.Dimension(390, 50));
		panelTemp.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

		tempTitle.setText("Température : ");
		panelTemp.add(tempTitle);

		minTemp.setText("min ");
		panelTemp.add(minTemp);

		spinMinTemp.setPreferredSize(new java.awt.Dimension(60, 30));
		panelTemp.add(spinMinTemp);

		maxTemp.setText("max ");
		panelTemp.add(maxTemp);

		spinMaxTemp.setPreferredSize(new java.awt.Dimension(60, 30));
		panelTemp.add(spinMaxTemp);

		panelCentre.add(panelTemp);

		panelHum.setPreferredSize(new java.awt.Dimension(390, 50));
		panelHum.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

		humTitle.setText("Humidité : ");
		panelHum.add(humTitle);

		minHum.setText("min ");
		panelHum.add(minHum);

		spinMinHum.setPreferredSize(new java.awt.Dimension(60, 30));
		panelHum.add(spinMinHum);

		maxHum.setText("max ");
		panelHum.add(maxHum);

		spinMaxHum.setPreferredSize(new java.awt.Dimension(60, 30));
		panelHum.add(spinMaxHum);

		panelCentre.add(panelHum);

		panelContent.setPreferredSize(new java.awt.Dimension(390, 220));
		panelContent.setLayout(new java.awt.GridBagLayout());

		panelAlert.setPreferredSize(new java.awt.Dimension(390, 200));
		panelAlert.setLayout(new java.awt.GridLayout(5, 2, -100, 2));

		modeTitle.setText("mode d'alerte");
		panelAlert.add(modeTitle);

		modeList.setModel(new DefaultComboBoxModel(new String[] { "Mail", "Pop-up" }));
		panelAlert.add(modeList);

		mailTitle.setText("Adresse mail :");
		panelAlert.add(mailTitle);
		panelAlert.add(mailField);

		localisationTitle.setText("<html><a href=''> Localisation</a> </html>");
		localisationTitle.addMouseListener(new MouseListener() {

			@Override
			public void mouseReleased(MouseEvent arg0) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mousePressed(MouseEvent arg0) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseExited(MouseEvent arg0) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseEntered(MouseEvent arg0) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseClicked(MouseEvent arg0) {
				URI uri = null;
				try {
					uri = new URI("http://woeid.rosselliot.co.nz/");
				} catch (URISyntaxException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					Desktop.getDesktop().browse(uri);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}



			}
		});
		panelAlert.add(localisationTitle);
		localisationField.setEditable(true);
		panelAlert.add(localisationField);

		tempUnitTitle.setText("unité de temérature");
		panelAlert.add(tempUnitTitle);

		tempUnitList.setModel(new DefaultComboBoxModel(new String[] { "Celsius", "Fahrenheit" }));
		panelAlert.add(tempUnitList);

		thermostatTitle.setText("thérmostat");
		panelAlert.add(thermostatTitle);

		thermostatSlider.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
		thermostatSlider.setMajorTickSpacing(2);
		thermostatSlider.setMaximum(10);
		thermostatSlider.setMinorTickSpacing(1);
		thermostatSlider.setPaintLabels(true);
		thermostatSlider.setPaintTicks(true);
		thermostatSlider.setSnapToTicks(true);
		thermostatSlider.setDoubleBuffered(true);
		thermostatSlider.setExtent(2);
		thermostatSlider.setMaximumSize(new java.awt.Dimension(200, 40));
		thermostatSlider.setPreferredSize(new java.awt.Dimension(200, 30));
		thermostatSlider.setValueIsAdjusting(true);
		panelAlert.add(thermostatSlider);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
		panelContent.add(panelAlert, gridBagConstraints);

		panelCentre.add(panelContent);

		add(panelCentre, java.awt.BorderLayout.CENTER);

		setParameters();
	}


	/**
	 * récupère les paramèrtes de l'utilisateurs depuis la base de données et les appliquent
	 * @throws SQLException 
	 * @throws ClassNotFoundException 
	 */
	private void setParameters() throws SQLException, ClassNotFoundException{
		String sqlRequest = "SELECT * From t_parametre ORDER BY id_parametre DESC LIMIT 1";
		
		Connection dataFridge = getDbConnection();
		
		Statement stmt = dataFridge.createStatement();
		ResultSet rs = stmt.executeQuery(sqlRequest); 
		rs.last();
		if( rs.getRow() == 0){
			setDefaultParameters();
		}else{
			// Set des paramètres si il y en a
			rs.first();
			
			spinMinTemp.setValue(rs.getInt("par_temperaturemin"));
			spinMaxTemp.setValue(rs.getInt("par_temperaturemax"));
			spinMinHum.setValue(rs.getInt("par_humiditymin"));
			spinMaxHum.setValue(rs.getInt("par_humiditymax"));
			modeList.setSelectedIndex(rs.getInt("par_mode"));
			mailField.setText(rs.getString("par_mail"));
			localisationField.setText(rs.getString("par_localisation"));
			tempUnitList.setSelectedIndex(rs.getInt("par_unit"));
			thermostatSlider.setValue(rs.getInt("par_thermostat"));
		}
	}


	/**
	 * Envoie les paramètres à la base de donnée
	 * @throws SQLException 
	 * @throws ClassNotFoundException 
	 */
	public void pushParameters() throws ClassNotFoundException, SQLException {
		Date now = new Date(new java.util.Date().getTime());
		String sqlRequest = "INSERT into t_parametre VALUES( NULL," + 
				spinMinTemp.getValue() + "," + spinMaxTemp.getValue() + "," + spinMinHum.getValue() + "," + 
				spinMaxHum.getValue() + ",'" + modeList.getSelectedIndex() + "','" + mailField.getText() + "','" +
				localisationField.getText() + "',"  + tempUnitList.getSelectedIndex() + ","  + thermostatSlider.getValue() + ",'"  + 
				now + "')";
		

		
		Connection dataFridge = getDbConnection();
		Statement stmt = dataFridge.createStatement();
		
		stmt.executeUpdate(sqlRequest);
		
		stmt.close();
		dataFridge.close();
	}
	
	
	private static Connection getDbConnection() throws SQLException, ClassNotFoundException{
		//Chargement du driver
		Class.forName("com.mysql.jdbc.Driver");
		//connexion à la bd
		Connection conn = DriverManager.getConnection(URL, USER, PASS);

		return conn;
	}

	/**
	 * En l'absence de paramètre cette méthode défini quelque paramètre par défaut
	 */
	private void setDefaultParameters() {
		localisationField.setText("783058");
		thermostatSlider.setValue(5);
	}


	/**
	 * envoie un mail à l'utilisateur
	 * @throws MessagingException 
	 * @throws AddressException 
	 */
	public void sendMail(String messageText) throws AddressException, MessagingException{
		String to = mailField.getText();
		final String username = "frigo.connecte@gmail.com";
		final String password = ".Etml-44";

		//Set les propriétés de la connection SMTP
		Properties props = new Properties();
		props.put("mail.smtp.host", "smtp.gmail.com");
		props.put("mail.smtp.socketFactory.port", "465");
		props.put("mail.smtp.socketFactory.class",
				"javax.net.ssl.SSLSocketFactory");
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.port", "465");

		// connection
		Session session = Session.getDefaultInstance(props,
				new javax.mail.Authenticator() {
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication( username, password );
			}
		});

		//set le mail
		Message message = new MimeMessage(session);
		//message.setFrom(new InternetAddress("from@no-spam.com"));
		message.setRecipients(Message.RecipientType.TO,
				InternetAddress.parse(to));
		message.setSubject("Testing Subject");
		message.setText( messageText );
		//envoie le mail
		Transport.send(message);
	}

	
	public String getAlert(double actualTemp, double actualHum) {
		
		String alert = "";
		
		if( (int)spinMinTemp.getValue() >= actualTemp ){
			alert += "trop froid, ";
		}
		
		if( (int) spinMaxTemp.getValue() <= actualTemp ){
			alert += "trop chaud, ";
		}
		
		if( (int) spinMinHum.getValue() >= actualHum ){
			alert += "pas assé humide, ";
		}
		
		if( (int) spinMaxHum.getValue() <= actualHum ){
			alert += "trop humide.";
		}
		
		return alert;
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(parameter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(parameter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(parameter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(parameter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					new parameter().setVisible(true);
				} catch (IOException | SQLException | ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});
	}


	// Variables declaration - do not modify                     
	private JPanel panelCentre;
	private JPanel Header;
	public 	JButton btnHome;
	public	JComboBox modeList;
	public JComboBox tempUnitList;
	private JLabel tempTitle;
	private JLabel title;
	private JLabel minHum;
	private JLabel maxHum;
	private JLabel minTemp;
	private JLabel humTitle;
	private JLabel maxTemp;
	private JLabel mailTitle;
	private JLabel modeTitle;
	private JLabel tempUnitTitle;
	private JLabel localisationTitle;
	private JLabel thermostatTitle;
	private JPanel panelTemp;
	private JPanel panelHum;
	private JPanel panelAlert;
	private JPanel panelContent;
	private JSlider thermostatSlider;
	private JSpinner spinMinHum;
	private JSpinner spinMaxHum;
	private JSpinner spinMinTemp;
	private JSpinner spinMaxTemp;
	public 	JTextField localisationField;
	public	JTextField mailField;
	// End of variables declaration                   
}